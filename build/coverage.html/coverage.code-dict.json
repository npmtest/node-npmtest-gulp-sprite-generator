{"/home/travis/build/npmtest/node-npmtest-gulp-sprite-generator/test.js":"/* istanbul instrument in package npmtest_gulp_sprite_generator */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-sprite-generator/lib.npmtest_gulp_sprite_generator.js":"/* istanbul instrument in package npmtest_gulp_sprite_generator */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_sprite_generator = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_sprite_generator = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-sprite-generator/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-sprite-generator && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_sprite_generator */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_sprite_generator\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_sprite_generator.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_sprite_generator.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_sprite_generator.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_sprite_generator.__dirname + '/lib.npmtest_gulp_sprite_generator.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-sprite-generator/node_modules/gulp-sprite-generator/index.js":"var path        = require('path'),\r\n    spritesmith = require('spritesmith'),\r\n    File        = require('vinyl'),\r\n    _           = require('lodash'),\r\n    colors      = require('colors'),\r\n    fs          = require('fs'),\r\n    gutil       = require('gulp-util'),\r\n    util        = require(\"util\"),\r\n    async       = require('async'),\r\n    Q           = require('q'),\r\n    through     = require('through2'),\r\n    Readable    = require('stream').Readable,\r\n\r\n    PLUGIN_NAME = \"gulp-sprite-generator\",\r\n    debug;\r\n\r\nvar log = function() {\r\n    var args, sig;\r\n\r\n    args = Array.prototype.slice.call(arguments);\r\n    sig = '[' + colors.green(PLUGIN_NAME) + ']';\r\n    args.unshift(sig);\r\n\r\n    gutil.log.apply(gutil, args);\r\n};\r\n\r\nvar getImages = (function() {\r\n    var httpRegex, imageRegex, filePathRegex, pngRegex, retinaRegex;\r\n\r\n    imageRegex    = new RegExp('background-image:[\\\\s]?url\\\\([\"\\']?([\\\\w\\\\d\\\\s!:./\\\\-\\\\_@]*\\\\.[\\\\w?#]+)[\"\\']?\\\\)[^;]*\\\\;(?:\\\\s*\\\\/\\\\*\\\\s*@meta\\\\s*(\\\\{.*\\\\})\\\\s*\\\\*\\\\/)?', 'ig');\r\n    retinaRegex   = new RegExp('@(\\\\d)x\\\\.[a-z]{3,4}$', 'ig');\r\n    httpRegex     = new RegExp('http[s]?', 'ig');\r\n    pngRegex      = new RegExp('\\\\.png$', 'ig');\r\n    filePathRegex = new RegExp('[\"\\']?([\\\\w\\\\d\\\\s!:./\\\\-\\\\_@]*\\\\.[\\\\w?#]+)[\"\\']?', 'ig');\r\n\r\n    return function(file, options) {\r\n        var reference, images,\r\n            retina, filePath,\r\n            url, image, meta, basename,\r\n            makeRegexp, content;\r\n\r\n        content = file.contents.toString();\r\n\r\n        images = [];\r\n\r\n        basename = path.basename(file.path);\r\n\r\n        makeRegexp = (function() {\r\n            var matchOperatorsRe = /[|\\\\/{}()[\\]^$+*?.]/g;\r\n\r\n            return function(str) {\r\n                return str.replace(matchOperatorsRe,  '\\\\$&');\r\n            }\r\n        })();\r\n\r\n        while ((reference = imageRegex.exec(content)) != null) {\r\n            url   = reference[1];\r\n            meta  = reference[2];\r\n\r\n            image = {\r\n                replacement: new RegExp('background-image:\\\\s+url\\\\(\\\\s?([\"\\']?)\\\\s?' + makeRegexp(url) + '\\\\s?\\\\1\\\\s?\\\\)[^;]*\\\\;', 'gi'),\r\n                url:         url,\r\n                group:       [],\r\n                isRetina:    false,\r\n                retinaRatio: 1,\r\n                meta:        {}\r\n            };\r\n\r\n            if (httpRegex.test(url)) {\r\n                options.verbose && log(colors.cyan(basename) + ' > ' + url + ' has been skipped as it\\'s an external resource!');\r\n                continue;\r\n            }\r\n\r\n            if (!pngRegex.test(url)) {\r\n                options.verbose && log(colors.cyan(basename) + ' > ' + url + ' has been skipped as it\\'s not a PNG!');\r\n                continue;\r\n            }\r\n\r\n            if (meta) {\r\n                try {\r\n                    meta = JSON.parse(meta);\r\n                    meta.sprite && (image.meta = meta.sprite);\r\n                } catch (err) {\r\n                    log(colors.cyan(basename) + ' > ' + colors.white('Can not parse meta json for ' + url) + ': \"' + colors.red(err) + '\"');\r\n                }\r\n            }\r\n\r\n            if (options.retina && (retina = retinaRegex.exec(url))) {\r\n                image.isRetina = true;\r\n                image.retinaRatio = retina[1];\r\n            }\r\n\r\n            filePath = filePathRegex.exec(url)[0].replace(/['\"]/g, '');\r\n\r\n            // if url to image is relative\r\n            if(filePath.charAt(0) === \"/\") {\r\n                filePath = path.resolve(options.baseUrl + filePath);\r\n            } else {\r\n                filePath = path.resolve(file.path.substring(0, file.path.lastIndexOf(path.sep)), filePath);\r\n            }\r\n\r\n            image.path = filePath;\r\n\r\n            // reset lastIndex\r\n            [httpRegex, pngRegex, retinaRegex, filePathRegex].forEach(function(regex) {\r\n                regex.lastIndex = 0;\r\n            });\r\n\r\n            images.push(image);\r\n        }\r\n\r\n        // reset lastIndex\r\n        imageRegex.lastIndex = 0;\r\n\r\n        // remove nulls and duplicates\r\n        images = _.chain(images)\r\n            .filter()\r\n            .unique(function(image) {\r\n                return image.path;\r\n            })\r\n            .value();\r\n\r\n        return Q(images)\r\n            // apply user filters\r\n            .then(function(images) {\r\n                return Q.Promise(function(resolve, reject) {\r\n                    async.reduce(\r\n                        options.filter,\r\n                        images,\r\n                        function(images, filter, next) {\r\n                            async.filter(\r\n                                images,\r\n                                function(image, ok) {\r\n                                    Q(filter(image)).then(ok);\r\n                                },\r\n                                function(images) {\r\n                                    next(null, images);\r\n                                }\r\n                            );\r\n                        },\r\n                        function(err, images) {\r\n                            if (err) {\r\n                                return reject(err);\r\n                            }\r\n\r\n                            resolve(images);\r\n                        }\r\n                    );\r\n                });\r\n            })\r\n            // apply user group processors\r\n            .then(function(images) {\r\n                return Q.Promise(function(resolve, reject) {\r\n                    async.reduce(\r\n                        options.groupBy,\r\n                        images,\r\n                        function(images, groupBy, next) {\r\n                            async.map(images, function(image, done) {\r\n                                Q(groupBy(image))\r\n                                    .then(function(group) {\r\n                                        if (group) {\r\n                                            image.group.push(group);\r\n                                        }\r\n\r\n                                        done(null, image);\r\n                                    })\r\n                                    .catch(done);\r\n                            }, next);\r\n                        },\r\n                        function(err, images) {\r\n                            if (err) {\r\n                                return reject(err);\r\n                            }\r\n\r\n                            resolve(images);\r\n                        }\r\n                    );\r\n                });\r\n            });\r\n    }\r\n})();\r\n\r\nvar callSpriteSmithWith = (function() {\r\n    var GROUP_DELIMITER = \".\",\r\n        GROUP_MASK = \"*\";\r\n\r\n    // helper function to minimize user group names symbols collisions\r\n    function mask(toggle) {\r\n        var from, to;\r\n\r\n        from = new RegExp(\"[\" + (toggle ? GROUP_DELIMITER : GROUP_MASK) + \"]\", \"gi\");\r\n        to = toggle ? GROUP_MASK : GROUP_DELIMITER;\r\n\r\n        return function(value) {\r\n            return value.replace(from, to);\r\n        }\r\n    }\r\n\r\n    return function(images, options) {\r\n        var all;\r\n\r\n        all = _.chain(images)\r\n            .groupBy(function(image) {\r\n                var tmp;\r\n\r\n                tmp = image.group.map(mask(true));\r\n                tmp.unshift('_');\r\n\r\n                return tmp.join(GROUP_DELIMITER);\r\n            })\r\n            .map(function(images, tmp) {\r\n                var config, ratio;\r\n\r\n                config = _.merge({}, options, {\r\n                    src: _.pluck(images, 'path')\r\n                });\r\n\r\n                // enlarge padding, if its retina\r\n                if (_.every(images, function(image) {return image.isRetina})) {\r\n                    ratio = _.chain(images).flatten('retinaRatio').unique().value();\r\n                    if (ratio.length == 1) {\r\n                        config.padding = config.padding * ratio[0];\r\n                    }\r\n                }\r\n\r\n                return Q.nfcall(spritesmith, config).then(function(result) {\r\n                    tmp = tmp.split(GROUP_DELIMITER);\r\n                    tmp.shift();\r\n\r\n                    // append info about sprite group\r\n                    result.group = tmp.map(mask(false));\r\n\r\n                    return result;\r\n                });\r\n            })\r\n            .value();\r\n\r\n\r\n        return Q.all(all).then(function(results) {\r\n            debug.images+= images.length;\r\n            debug.sprites+= results.length;\r\n            return results;\r\n        });\r\n    }\r\n})();\r\n\r\nvar updateReferencesIn = (function() {\r\n    var template;\r\n\r\n    template = _.template(\r\n        'background-image: url(\"<%= spriteSheetPath %>\");\\n    ' +\r\n        'background-position: -<%= isRetina ? (coordinates.x / retinaRatio) : coordinates.x %>px -<%= isRetina ? (coordinates.y / retinaRatio) : coordinates.y %>px;\\n    ' +\r\n        'background-size: <%= isRetina ? (properties.width / retinaRatio) : properties.width %>px <%= isRetina ? (properties.height / retinaRatio) : properties.height %>px!important;'\r\n    );\r\n\r\n    return function(file) {\r\n        var content = file.contents.toString();\r\n\r\n        return function(results) {\r\n            results.forEach(function(images) {\r\n                images.forEach(function(image) {\r\n                    content = content.replace(image.replacement, template(image));\r\n                });\r\n            });\r\n\r\n            return Q(content);\r\n        }\r\n    }\r\n})();\r\n\r\nvar exportSprites = (function() {\r\n    function makeSpriteSheetPath(spriteSheetName, group) {\r\n        var path;\r\n\r\n        group || (group = []);\r\n\r\n        if (group.length == 0) {\r\n            return spriteSheetName;\r\n        }\r\n\r\n        path = spriteSheetName.split('.');\r\n        Array.prototype.splice.apply(path, [path.length - 1, 0].concat(group));\r\n\r\n        return path.join('.');\r\n    }\r\n\r\n    return function(stream, options) {\r\n        return function(results) {\r\n            results = results.map(function(result) {\r\n                var sprite;\r\n\r\n                result.path = makeSpriteSheetPath(options.spriteSheetName, result.group);\r\n\r\n                sprite = new File({\r\n                    path: result.path,\r\n                    contents: new Buffer(result.image, 'binary')\r\n                });\r\n\r\n                stream.push(sprite);\r\n\r\n                options.verbose && log('Spritesheet', result.path, 'has been created');\r\n\r\n\r\n                return result;\r\n            });            \r\n\r\n            return results;\r\n        }\r\n    }\r\n})();\r\n\r\nvar exportStylesheet = function(stream, options) {\r\n    return function(content) {\r\n        var stylesheet;\r\n\r\n        stylesheet = new File({\r\n            path: options.styleSheetName,\r\n            contents: new Buffer(content)\r\n        });\r\n\r\n        stream.push(stylesheet);\r\n\r\n        options.verbose && log('Stylesheet', options.styleSheetName, 'has been created');\r\n    }\r\n};\r\n\r\nvar mapSpritesProperties = function(images, options) {\r\n    return function(results) {\r\n        return results.map(function(result) {\r\n            return _.map(result.coordinates, function(coordinates, path) {\r\n                return _.merge(_.find(images, {path: path}), {\r\n                    coordinates: coordinates,\r\n                    spriteSheetPath: options.spriteSheetPath ? options.spriteSheetPath + \"/\" + result.path : result.path,\r\n                    properties: result.properties\r\n                });\r\n            });\r\n        });\r\n    }\r\n};\r\n\r\nmodule.exports = function(options) { 'use strict';\r\n    var stream, styleSheetStream, spriteSheetStream;\r\n\r\n    debug = {\r\n        sprites: 0,\r\n        images:  0\r\n    };\r\n\r\n    options = _.merge({\r\n        src:        [],\r\n        engine:     \"pngsmith\", //auto\r\n        algorithm:  \"top-down\",\r\n        padding:    0,\r\n        engineOpts: {},\r\n        exportOpts: {\r\n\r\n        },\r\n        imgOpts: {\r\n            timeout: 30000\r\n        },\r\n\r\n        baseUrl:         './',\r\n        retina:          true,\r\n        styleSheetName:  null,\r\n        spriteSheetName: null,\r\n        spriteSheetPath: null,\r\n        filter:          [],\r\n        groupBy:         [],\r\n        accumulate:      false,\r\n        verbose:         false\r\n    }, options || {});\r\n\r\n    // check necessary properties\r\n    ['spriteSheetName'].forEach(function(property) {\r\n        if (!options[property]) {\r\n            throw new gutil.PluginError(PLUGIN_NAME, '`' + property + '` is required');\r\n        }\r\n    });\r\n\r\n    // prepare filters\r\n    if (_.isFunction(options.filter)) {\r\n        options.filter = [options.filter]\r\n    }\r\n\r\n    // prepare groupers\r\n    if (_.isFunction(options.groupBy)) {\r\n        options.groupBy = [options.groupBy]\r\n    }\r\n\r\n    // add meta skip filter\r\n    options.filter.unshift(function(image) {\r\n        image.meta.skip && options.verbose && log(image.path + ' has been skipped as it meta declares to skip');\r\n        return !image.meta.skip;\r\n    });\r\n\r\n    // add not existing filter\r\n    options.filter.push(function(image) {\r\n        var deferred = Q.defer();\r\n\r\n        fs.exists(image.path, function(exists) {\r\n            !exists && options.verbose && log(image.path + ' has been skipped as it does not exist!');\r\n            deferred.resolve(exists);\r\n        });\r\n\r\n        return deferred.promise;\r\n    });\r\n\r\n    // add retina grouper if needed\r\n    if (options.retina) {\r\n        options.groupBy.unshift(function(image) {\r\n            if (image.isRetina) {\r\n                return \"@\" + image.retinaRatio + \"x\";\r\n            }\r\n\r\n            return null;\r\n        });\r\n    }\r\n\r\n    // create output streams\r\n    function noop(){}\r\n    styleSheetStream = new Readable({objectMode: true});\r\n    spriteSheetStream = new Readable({objectMode: true});\r\n    spriteSheetStream._read = styleSheetStream._read = noop;\r\n\r\n    var accumulatedFiles = [];\r\n\r\n    stream = through.obj(\r\n        function(file, enc, done) {\r\n            if (file.isNull()) {\r\n                this.push(file); // Do nothing if no contents\r\n                return done();\r\n            }\r\n\r\n            if (file.isStream()) {\r\n                this.emit('error', new gutil.PluginError(PLUGIN_NAME, 'Streams is not supported!'));\r\n                return done();\r\n            }\r\n\r\n            if (file.isBuffer()) {\r\n                // postpone evaluation, if we accumulating\r\n                if (options.accumulate) {\r\n                    accumulatedFiles.push(file);\r\n                    stream.push(file);\r\n                    done();\r\n                    return;\r\n                }\r\n\r\n                getImages(file, options)\r\n                    .then(function(images) {\r\n                        callSpriteSmithWith(images, options)\r\n                            .then(exportSprites(spriteSheetStream, options))\r\n                            .then(mapSpritesProperties(images, options))\r\n                            .then(updateReferencesIn(file))\r\n                            .then(exportStylesheet(styleSheetStream, _.extend({}, options, { styleSheetName: options.styleSheetName || path.basename(file.path) })))\r\n                            .then(function() {\r\n                                // pipe source file\r\n                                stream.push(file);\r\n                                done();\r\n                            })\r\n                            .catch(function(err) {\r\n                                stream.emit('error', new gutil.PluginError(PLUGIN_NAME, err));\r\n                                done();\r\n                            });\r\n                    });\r\n\r\n\r\n                return null;\r\n            } else {\r\n                this.emit('error', new gutil.PluginError(PLUGIN_NAME, 'Something went wrong!'));\r\n                return done();\r\n            }\r\n        },\r\n        // flush\r\n        function(done) {\r\n            var pending;\r\n\r\n            if (options.accumulate) {\r\n                pending = Q\r\n                    .all(accumulatedFiles.map(function(file) {\r\n                        return getImages(file, options);\r\n                    }))\r\n                    .then(function(list) {\r\n                        var images;\r\n\r\n                        return _.chain(list)\r\n                            .reduce(function(images, portion) {\r\n                                return images.concat(portion);\r\n                            }, [])\r\n                            .unique(function(image) {\r\n                                return image.path;\r\n                            })\r\n                            .value();\r\n                    })\r\n                    .then(function(images) {\r\n                        return callSpriteSmithWith(images, options)\r\n                            .then(exportSprites(spriteSheetStream, options))\r\n                            .then(mapSpritesProperties(images, options))\r\n                            .then(function(results) {\r\n                                return Q.all(accumulatedFiles.map(function(file) {\r\n                                    return updateReferencesIn(file)(results)\r\n                                        .then(exportStylesheet(styleSheetStream, _.extend({}, options, { styleSheetName: path.basename(file.path) })));\r\n                                }));\r\n                            });\r\n                    })\r\n                    .catch(function(err) {\r\n                        stream.emit('error', new gutil.PluginError(PLUGIN_NAME, err));\r\n                        done();\r\n                    });\r\n            } else {\r\n                pending = Q();\r\n            }\r\n\r\n            pending.then(function() {\r\n                // end streams\r\n                styleSheetStream.push(null);\r\n                spriteSheetStream.push(null);\r\n\r\n                log(util.format(\"Created %d sprite(s) from %d images, saved %s% requests\", debug.sprites, debug.images, debug.images > 0 ? ((debug.sprites / debug.images) * 100).toFixed(1) : 0));\r\n\r\n                done();\r\n            });\r\n        }\r\n    );\r\n\r\n    stream.css = styleSheetStream;\r\n    stream.img = spriteSheetStream;\r\n\r\n    return stream;\r\n};"}